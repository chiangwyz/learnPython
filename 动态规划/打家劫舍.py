"""
分析：我们的目标是在不触发警报的情况下偷窃到最高金额。
    由于不能连续偷窃相邻的两个房屋，我们需要在每个房屋决定是偷窃还是跳过。

动态规划解法的关键在于定义一个状态数组 dp，其中 dp[i] 表示到第 i 个房屋时能偷窃到的最大金额。对于每个房屋 i，有两种选择：
1. 偷窃第 i 个房屋：此时不能偷窃第 i-1 个房屋，因此偷窃金额为第 i 个房屋的金额加上 dp[i-2]。
2. 不偷窃第 i 个房屋：保持目前为止的最大偷窃金额，即 dp[i-1]。
    因此，状态转移方程为：
    dp[i]=max(dp[i−1], nums[i]+dp[i−2])

初始状态是 dp[0] = nums[0]（只有一个房屋时只能偷窃这个房屋），并且如果有两个房屋，dp[1] 为 nums[0] 和 nums[1] 中的较大者（只能选择偷窃其中一个）。

根据这个思路，我们可以编写代码：
"""
class Solution:
    def rob(self, nums: List[int]) -> int:
        # 如果数组为空，则返回0
        if not nums:
            return 0
        # 如果数组长度小于等于2，返回其中的最大值
        if len(nums) <= 2:
            return max(nums)
        
        # 初始化dp数组
        dp = [0] * len(nums)
        # 第一家的最大偷窃金额就是第一家的金额
        dp[0] = nums[0]
        # 第二家的最大偷窃金额是第一家和第二家中的较大者
        dp[1] = max(nums[0], nums[1])
        
        # 从第三家开始计算每家的最大偷窃金额
        for i in range(2, len(nums)):
            # 对于第i家，可以选择不偷（保持前一家的金额），或者偷（前前家的金额加上当前这家的金额）
            dp[i] = max(dp[i-1], nums[i] + dp[i-2])
        
        # 返回最后一家的最大偷窃金额
        return dp[-1]

