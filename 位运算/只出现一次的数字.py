"""
要找出数组中唯一出现一次的元素，我们可以使用位运算中的异或运算。
异或运算有两个关键特性：任何数和0做异或运算，结果仍然是原来的数，即 a ^ 0 = a；任何数和其自身做异或运算，结果是0，即 a ^ a = 0。
此外，异或运算满足交换律和结合律，即 a ^ b ^ a = (a ^ a) ^ b = 0 ^ b = b。

因此，在给定的数组中，除了一个元素只出现一次外，其他元素都出现两次。
我们可以通过对数组中的所有元素进行异或运算，最终得到的结果即为唯一出现一次的元素。
"""

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        result = 0
        for num in nums:
            result ^= num  # 对数组中的每个元素进行异或运算
        return result     # 返回结果
