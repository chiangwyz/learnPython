"""
这行代码 n &= n - 1 时，实际上它是在执行一个非常巧妙的位运算操作，用来去除整数 n 的二进制表示中最低位的 '1'。
这一操作的具体原理如下：

二进制表示和位运算
二进制表示：在计算机中，所有的数值都是以二进制形式存储的。例如，整数 5 在二进制中表示为 101。
位运算AND（&）：位运算AND对两个数的每一位执行逻辑与操作。只有在两个相应的二进制位都为1时，结果位才为1。
操作 n & (n - 1)
减 1 的影响：在二进制中，从数 n 减去 1，实际上是将 n 的二进制表示中最低位的 1 变为 0，并且如果这个 1 后面还有 0，则这些 0 都变成 1。
与操作（&）的结果：当我们对 n 与 n-1 进行AND操作时，从 n 的最低位的 1 开始到最低位，所有的位都会变成 0。
因为 n 的最低位的 1 变成了 0，并且 n-1 会使得这个位置及其以下的所有位与 n 不同，因此AND操作会将 n 的最低位的 1 及其以下的位都清零。

举个例子
假设 n = 12，其二进制表示为 1100。
n - 1 的结果为 11，二进制表示为 1011。

然后，n & (n - 1) 的操作如下：
n = 1100 (12)
n-1 = 1011 (11)
------------
& = 1000 (8)
通过这个操作，n 的二进制表示中最低位的 1（即第二位的 1）被清除。

效果
这样，每执行一次 n &= n - 1，n 的二进制表示中就会少一个 1，直到 n 变成 0。
这个过程中，我们实际上计算了 n 的二进制表示中 1 的数量，即其汉明重量。
这种方法非常高效，因为它直接操作二进制位，且每次操作都减少了至少一个 1，比逐位检查每个位是否为 1 要快得多。
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        # 初始化计数器
        count = 0
        # 当n不为0时循环
        while n:
            # 执行n&(n-1)操作，将n的最低位的1变成0
            n &= n - 1
            # 计数器加1
            count += 1
        # 返回计数结果
        return count
