"""
要计算一个数 n 的阶乘（n!）中尾随零的数量，关键在于理解尾随零是怎样形成的。
尾随零是由乘法中的因子 10 产生的，而 10 可以分解为 2 和 5 的乘积。在 n 的阶乘中，2 的因子总是比 5 的因子多，所以尾随零的数量实际上由 5 的因子的数量决定。

要计算 n! 中 5 的因子数量，可以遵循以下步骤：
1. 计算 n/5，得到不大于 n 的数中有多少个是 5 的倍数。
2. 然后计算 n/25，得到不大于 n 的数中有多少个是 25 的倍数（因为每个这样的数会贡献额外的一个 5）。
    继续计算 n/125，得到不大于 n 的数中有多少个是 125 的倍数，以此类推。
3. 最后，将所有这些计数加起来就是 n! 中 5 的因子的总数，也就是尾随零的数量。
"""

class Solution:
    def trailingZeroes(self, n: int) -> int:
        # 初始化零的数量为 0
        count = 0
        # 当 n 大于等于 5 时
        while n >= 5:
            # n 除以 5，得到不大于 n 的数中有多少个是 5 的倍数
            n //= 5
            # 累加这些 5 的倍数的数量到 count 变量
            count += n
        # 返回计算得到的尾随零的数量
        return count
